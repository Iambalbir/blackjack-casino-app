plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"

}
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


android {
    namespace "com.doddev.blackjack"
    compileSdkVersion 35
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildToolsVersion "33.0.1"
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.doddev.blackjack"
        minSdkVersion 26
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    signingConfigs {
        /*release {
            storePassword 'dodDEVBlackJack987@#'
            keyAlias = 'upload'
            keyPassword 'dodDEVBlackJack987@#'
            storeFile file('upload-keystore.jks')
        }*/
    }
    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled = true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            minifyEnabled = true
            shrinkResources = true
        }

    }


    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def project = ""
            def separator = "_"
            def buildType = variant.buildType.name
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def date = new Date()
            def formattedDate = date.format('yyyy_MM_dd')
            if (variant.buildType.name == "release") {
                def newApkName = project + separator + "v" + versionName + separator + versionCode + separator + buildType + separator + formattedDate + ".apk"
                output.outputFileName = newApkName
            }
        }
    }
}
java {

    toolchain {

        languageVersion = JavaLanguageVersion.of(17)

    }

}
flutter {
    source '../..'
}

dependencies {
    implementation 'com.google.android.material:material:1.6.0'
    implementation "com.google.firebase:firebase-bom:33.13.0"
    implementation "com.google.firebase:firebase-analytics"
    implementation "com.google.firebase:firebase-crashlytics"
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.stripe:stripe-android:20.42.0'

}
